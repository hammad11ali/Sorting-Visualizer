Bubble Sort:

Bubblesort(arr)
	
	for i=arr.length to 0
		for j=0 to i
			if arr[j]>arr[j+1]
				swap(arr[j],arr[j+1])
	return arr

Cocktail Sort:

CocktailSort(arr)
 	  j = 0;
	  
  		do 
    			for i=j to arr.length -(2+j)
      
      				if arr[i] > arr[i + 1] 
        				swap(arr[i],arr[i+1])
        				swapped = true;
    	if (!swapped) 
      		break;
    	swapped = false;
   	for i=j to arr.length -(2+j) {
    		if arr[i] > arr[i + 1] 
        				swap(arr[i],arr[i+1])
        				swapped = true;

      animation.push(comparison);
      while (swapped);
  return arr;
Comb Sort:

CombSort(array)
	 interval = array.length/1.3
  	while interval > 0 {
    		for i=0 to array.length
      			if array[i] > array[i + interval] 
       				 swap(array[i],array[i+interval])
    interval = Math.floor(interval / 1.3);


Gnome Sort:

GnomeSort(arr)
	function moveBack(i) {
    		for i > 0 && arr[i - 1] > arr[i]
      			swap(arr[i],arr[i-1])
  	}
  	for i=1 to arr.length 
    		if (arr[i - 1] > arr[i]) 
      			moveBack(i);

Insertion Sort:

InsertionSort(arr)
	for i=1 to arr.length
		j=i-1
		temp=arr[i]
		while j>=0 &&arr[j]>temp
			arr[j+1]=arr[j]
			j--;
		arr[j+1]=temp

Shell Sort:

ShellSort(arr)
	increment = arr.length / 2;
    	while increment > 0 
        	for i = increment to arr.length 
            		j = i;
            		temp = arr[i];
   			while j >= increment && arr[j-increment] > temp
                		arr[j] = arr[j-increment];
                		j = j - increment;
            
    			arr[j] = temp;
    
        if increment == 2
            increment = 1;
        else 
            increment = parseInt(increment*5 / 11);
  return arr;

SelectionSort(A)
    	len = array_length(A);
    		for i = 0 to len - 1 
        		j_min = i;
        		for var j = i + 1 to len 
            			if arr[j] < A[j_min] 
                			j_min = j;
                	if (j_min !== i) {
            			swap(A, i, j_min);
        